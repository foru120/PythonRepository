from pandas.compat.numpy.function import validate_argsort_with_ascending
import pandas as pd
from PythonClass.common_func import CommonFunc

# tuple
#  - 리스트 변수와는 다르게 변경이 불가능하다.

a = (1, 2, 3)
b = 1, 2, 3

print(type(a), type(b))

print('')
print('====================================================================================================')
print('== 문제 80. 아래와 같은 상황일 때 player 1 이 둘때 가장 유리한 수가 무엇인가?')
print('====================================================================================================')
# select c5,
#        max(val_new)
#   from ttt_data
#  where c1 = 1 and c2 = 2 and c3 = 1 and c4 = 2 and c7 = 1 and c9 = 2
#
#  c5;
#
# select c6,
#        max(val_new)
#   from ttt_data
#  where c1 = 1 and c2 = 2 and c3 = 1 and c4 = 2 and c7 = 1 and c9 = 2
#  group by c6;
#
# select c8,
#        max(val_new)
#   from ttt_data a
#  where c1 = 1 and c2 = 2 and c3 = 1 and c4 = 2 and c7 = 1 and c9 = 2
#  group by c8;


print('')
print('====================================================================================================')
print('== 문제 81. mit_ttt 학습 데이터를 파일명을 간단하게 변경하고 전체 데이터를 파이썬에서 출력하세요')
print('====================================================================================================')
for mitData in CommonFunc.returnCsvData('mit_ttt.csv'):
    print(mitData)


print('')
print('====================================================================================================')
print('== 문제 82. pandas 모듈을 이용해서 사원 테이블에서 최대 월급을 출력하시오.')
print('====================================================================================================')
emp = pd.DataFrame.from_csv('D:\\KYH\\02.PYTHON\\data\\emp.csv')
print(emp['sal'].max())


print('')
print('====================================================================================================')
print('== 문제 83. 직업이 SALESMAN 인 사원들의 이름과 월급과 직업을 출력하시오.')
print('====================================================================================================')
print(emp[['ename', 'sal']][emp['job'] == 'SALESMAN'])
            #열                     #행


print('')
print('====================================================================================================')
print('== 문제 84. 월급이 3000 이상인 사원들의 이름과 월급을 출력하시오!')
print('====================================================================================================')
result = emp[['ename', 'sal']][emp['sal'] >= 3000]
print(result)


print('')
print('====================================================================================================')
print('== 문제 85. 월급이 3000 이상인 사원들의 이름과 월급을 출력하는데 월급이 낮은 사원부터 출력하시오!')
print('====================================================================================================')
result = emp[['ename', 'sal']][emp['sal'] >= 3000].sort_values('sal', ascending=True)
print(result)


print('')
print('====================================================================================================')
print('== 문제 86. 부서번호가 20번인 사원들의 최대월급을 출력하시오!')
print('====================================================================================================')
result = emp[['sal']][emp['deptno'] == 20].max()
print(result)


print('')
print('====================================================================================================')
print('== 문제 87. 직업, 직업별 토탈월급을 출력하시오!')
print('====================================================================================================')
result = emp.groupby('job')['sal'].sum()
print(result)


print('')
print('====================================================================================================')
print('== 문제 88. 부서번호, 부서번호별 평균월급을 출력하시오!')
print('====================================================================================================')
result = emp.groupby('deptno')['sal'].mean()
print(result)


print('')
print('====================================================================================================')
print('== 문제 89. 아래의 결과를 pandas 로 구현하시오!')
print('====================================================================================================')
mit = pd.DataFrame.from_csv('D:\\KYH\\02.PYTHON\\data\\mit_ttt2.csv')
result = mit[(mit['PLAYER'] == 1) &
             (mit['C1'] == 1) &
             (mit['C2'] == 2) &
             (mit['C3'] == 1) &
             (mit['C4'] == 2) &
             (mit['C7'] == 1) &
             (mit['C9'] == 2) &
             (mit['C5'] + mit['C6'] + mit['C8'] == 1)]
result = result.groupby(['C5', 'C6', 'C8'])['LEARNING_ORDER'].max()
print(result)

# "pandas 모듈 사용법"
#  기본 문법 : 판다스 데이터 프레임 [열][행]
# pandas dataframe 으로 만들려면 csv 파일안에 index 컬럼이 존재해야 한다.
emp = pd.DataFrame.from_csv('D:\\KYH\\02.PYTHON\\data\\emp.csv')
empresult = emp[['ename', 'sal']][emp['sal'] == 3000]
print(empresult)

empresult = emp[['ename', 'sal']]
print(empresult)

empresult = emp
print(empresult)


print('')
print('====================================================================================================')
print('== 문제 90. 직업이 SALESMAN 인 사원들의 이름과 월급과 직업을 출력하시오!')
print('====================================================================================================')
empresult = emp[['ename', 'sal', 'job']][emp['job'] == 'SALESMAN']
print(empresult)

for empData in CommonFunc.returnCsvData('emp.csv'):
    if empData[2] == 'SALESMAN':
        print(empData[1], empData[5], empData[2])

# ■ 기타 비교 연산자
#    오라클               파이썬                판다스
# 1. between..and        1 < a <2              [emp['sal'] >= 1000 and emp['sal'] <= 3000]
# 2. in                  in                    emp['job'].isin
# 3. is null             == ''                 emp['comm'].isnull()
# 4. like                [0:1]                 apply + lambda


print('')
print('====================================================================================================')
print('== 문제 91. 직업이 SALESMAN, ANALYST 인 사원들의 이름과 월급과 직업을 출력하시오')
print('====================================================================================================')
empresult = emp[['ename', 'sal', 'job']][emp['job'].isin(['SALESMAN', 'ANALYST'])]
print(empresult)
print('-- no pandas ------------------------------------------')
for empData in CommonFunc.returnCsvData('emp.csv'):
    if empData[2] in ['SALESMAN', 'ANALYST']:
        print(empData[1], empData[5], empData[2])


print('')
print('====================================================================================================')
print('== 문제 92. 직업이 SALESMAN, ANALYST 가 아닌 사원들의 이름과 월급과 직업을 출력하시오')
print('====================================================================================================')
emp = pd.read_csv('D:\\KYH\\02.PYTHON\\data\\emp.csv')
empresult = emp[['ename', 'sal', 'job']][~emp['job'].isin(['SALESMAN', 'ANALYST'])]
print(empresult)
print('-- no pandas ------------------------------------------')
for empData in CommonFunc.returnCsvData('emp.csv'):
    if empData[2] not in ['SALESMAN', 'ANALYST']:
        print(empData[1], empData[5], empData[2])


print('')
print('====================================================================================================')
print('== 문제 93. 커미션이 null 인 사원들의 이름과 커미션을 출력하시오!')
print('====================================================================================================')
empresult = emp[['ename', 'comm']][emp['comm'].isnull()]
print(empresult)
print('-- no pandas ------------------------------------------')
for empData in CommonFunc.returnCsvData('emp.csv'):
    if empData[6] == '':
        print(empData[1], empData[5], empData[2])


print('')
print('====================================================================================================')
print('== 문제 94. 커미션이 null 이 아닌 사원들의 이름과 커미션을 출력하시오!')
print('====================================================================================================')
empresult = emp[['ename', 'comm']][~emp['comm'].isnull()]
print(empresult)
print('-- no pandas ------------------------------------------')
for empData in CommonFunc.returnCsvData('emp.csv'):
    if empData[6] != '':
        print(empData[1], empData[5], empData[2])


print('')
print('====================================================================================================')
print('== 문제 95. 월급이 1000 에서 3000 사이인 사원들의 이름과 월급을 출력하시오!')
print('====================================================================================================')
empresult = emp[['ename', 'sal']][(emp['sal'] >= 1000) & (emp['sal'] <= 3000)]
print(empresult)
print('-- no pandas ------------------------------------------')
for empData in CommonFunc.returnCsvData('emp2.csv'):
    if 1000 <= int(empData[5]) <= 3000:
        print(empData[1], empData[5], empData[2])


print('')
print('====================================================================================================')
print('== 문제 96. 이름의 첫 글자가 S 로 시작하는 사원들의 이름을 출력하세요.')
print('====================================================================================================')
empresult = emp[['ename']][emp['ename'].apply(lambda x: x[0] == 'S')]
print(empresult)


print('')
print('====================================================================================================')
print('== 문제 97. 위의 문제 96번을 lambda 표현식을 쓰지말고 함수를 직접 생성해서 수행하시오!')
print('====================================================================================================')
def initCap(x):
    if x[0] == 'S':
        return True
    return False
empresult = emp[['ename', 'sal']][emp['ename'].apply(initCap)]
print(empresult)


print('')
print('====================================================================================================')
print('== 문제 98. 이름의 끝 글자가 T 로 끝나는 사원들의 이름을 출력하시오!')
print('====================================================================================================')
empresult = emp[['ename']][emp['ename'].apply(lambda x: x[-1] == 'T')]
print(empresult)

# ■ 판다스의 기본 문법
#  그룹함수 : max, min, sum, mean, count
#   - emp[['sal']][emp['job']=='SALESMAN'].max()
#     직업이 SALESMAN 인 사원들의 월급중에서 최대값을 출력
#   - emp.groupby('job')['sal'].max()
#     직업별 최대 월급을 출력

print('')
print('====================================================================================================')
print('== 문제 99. 직업, 직업별 최대월급을 출력하는데 직업이 SALESMAN 은 제외하고 출력하시오!')
print('====================================================================================================')
empresult = emp[['job', 'sal']][~emp['job'].isin(['SALESMAN'])]
empresult = empresult.groupby('job')['sal'].max()
print(empresult)


print('')
print('====================================================================================================')
print('== 문제 100. 부서번호, 직업, 부서번호별 직업별 토탈월급을 출력하시오!')
print('====================================================================================================')
empresult = emp.groupby(['deptno', 'job'])['sal'].sum()
print(empresult)


print('')
print('====================================================================================================')
print('== 문제 101. ')
print('====================================================================================================')
jonessal = emp[['sal']][emp['ename'] == 'JONES'].values[0]
result = emp[['ename', 'sal']][emp['sal'] > jonessal[0]]
print(result)


print('')
print('====================================================================================================')
print('== 문제 102. SCOTT 의 직속상사 이름을 출력하시오!')
print('====================================================================================================')
scottmgr = emp[['mgr']][emp['ename'] == 'SCOTT'].values[0]
result = emp[['ename']][emp['empno'] == scottmgr[0]]
print(result)


print('')
print('====================================================================================================')
print('== 문제 103. 관리자인 사원들의 이름을 출력하시오!')
print('====================================================================================================')
result = emp[['ename']][emp['empno'].isin(emp['mgr'])]
print(result)


print('')
print('====================================================================================================')
print('== 문제 104. 컬럼 c5, c6, c8이 남아있을 때 어떤 수가 가장 좋은 수인가?')
print('====================================================================================================')
mit = pd.read_csv('D:\\KYH\\02.PYTHON\\data\\mit_ttt.csv')
subquery = mit[(mit['C1'] == 1) &
               (mit['C2'] == 2) &
               (mit['C3'] == 1) &
               (mit['C4'] == 2) &
               (mit['C5']+mit['C6']+mit['C8'] == 1)].groupby(['C5', 'C6', 'C8'])['LEARNING_ORDER'].max().values
result = mit[(mit['LEARNING_ORDER'].isin(subquery)) & (mit['PLAYER'] == 1)]
print(result)


# ■ 딕셔너리 변수
#  - 딕셔너리 자료형은 key 와 value 를 조합해서 사용하는 자료형

print('')
print('====================================================================================================')
print('== 문제 105. 딕셔너리 자료형을 이용해서 주어가 0, 명사가 2, 동사가 1로 해서 한글과 영문을 저장하시오.')
print('====================================================================================================')
dic = {}
dic['나는'] = ('I', 0)
dic['소년'] = ('boy', 2)
dic['이다'] = ('am', 1)
dic['피자'] = ('pizza', 2)
dic['먹는다'] = ('eat', 1)
print(dic)


print('')
print('====================================================================================================')
print('== 문제 106. 한글을 물어보게하고 한글을 입력하면 영어로 번역하는 프로그램을 파이썬으로 작성하시오!')
print('====================================================================================================')
# dic = {}
# dic['나는'] = ('I', 0)
# dic['소년'] = ('boy', 2)
# dic['이다'] = ('am', 1)
# dic['피자를'] = ('pizza', 2)
# dic['먹는다'] = ('eat', 1)
#
# result = ''
# input_kor = input('입력하세요.(나는 소년 이다 / 나는 피자를 먹는다) :')
# input_list = input_kor.split(' ')
# for i in range(len(input_list)):
#     for j in input_list:
#         if dic[j][1] == i:
#             result = result + dic[j][0] + ' '
# print(result)


print('')
print('====================================================================================================')
print('== 문제 107. 카페에서 smt 용 감성어 사전을 내려받아 csv 파일을 파이썬에서 불러오시오!')
print('====================================================================================================')
for smtData in CommonFunc.returnCsvDataDef('smt_dic.csv'):
    print(smtData[1], smtData[3], smtData[4])


print('')
print('====================================================================================================')
print('== 문제 109. smt 감성어 사전에 1 번째 요소를 key 로 하고 3번째 요소를 딕셔너리 변수의 0번째 요소로 하고 4번째 요소를')
print('==  딕셔너리 변수의 4번째 요소로 지정해서 smt_dic 라는 딕셔너리 자료형 변수를 생성하시오!')
print('====================================================================================================')
smt_dic = {}
for smtData in CommonFunc.returnCsvDataDef('smt_dic.csv'):
    smt_dic[smtData[1]] = (smtData[3], smtData[4])
    smt_dic[smtData[2]] = (smtData[3], smtData[4])
print(smt_dic)


print('')
print('====================================================================================================')
print('== 문제 110. 무성이가 만든 감성어 사전과 진우가 만든 번역기를 이용해서 한글 영문 번역기를 완성시키시오.')
print('====================================================================================================')
result = ''
input_kor = input('입력하세요 : ')
input_list = input_kor.split(' ')
for i in range(len(input_list)):
    for j in input_list:
        if int(smt_dic[j][1]) == i:
            result = result + smt_dic[j][0] + ' '
            break
print(result)
